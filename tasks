#!/bin/bash

set -Eeo pipefail

if [ "$#" -ne 3 ]; then
  echo "Usage: $0 TASK STACK STACK-ENVIRONMENT"
  exit 1
fi

task="$1"
stack_name="$2"
stack_env="$3"
state_region="eu-west-2"
tf_dir=stacks/${stack_name}/terraform


function read_config {
    jq -r ".${stack_env}.$1 // \"\"" environment.json
}

env_name=$(read_config name)
state_lock_table=$(read_config dynamo_table)
state_bucket=$(read_config bucket_name)
state_key_prefix=$(read_config state_key_prefix)
s3_state_key=${state_key_prefix}${stack_name}/terraform.tfstate
role_arn_param=$(read_config role_arn_param)

echo "Terraform state stored in s3://${state_bucket}/${s3_state_key}"

function assume_role() {
  if [ -n "$role_arn_param" ]; then
    role_arn=$(aws ssm get-parameters --region ${state_region} --names ${role_arn_param} --query 'Parameters[0].Value' --output text)
    session_name="data-sandbox-infra-${env_name}-session"

    sts=$(
      aws sts assume-role \
        --role-arn $role_arn \
        --role-session-name $session_name \
        --output json
    )

    export AWS_ACCESS_KEY_ID=$(echo $sts | jq -r .Credentials.AccessKeyId)
    export AWS_SECRET_ACCESS_KEY=$(echo $sts | jq -r .Credentials.SecretAccessKey)
    export AWS_SESSION_TOKEN=$(echo $sts | jq -r .Credentials.SessionToken)
  fi

}

export TF_DATA_DIR=.terraform/${stack_env}/${stack_name}

function tf_init() {
  assume_role
  terraform -chdir=${tf_dir} init \
    -backend-config key=${s3_state_key} \
    -backend-config bucket=${state_bucket} \
    -backend-config dynamodb_table=${state_lock_table} \
    -backend-config region=${state_region}
}

echo "--- ${task} ---"
case "${task}" in
validate)
  tf_init
  terraform -chdir=${tf_dir} validate
  ;;
dojo-validate)
  dojo "./tasks validate ${stack_name} ${stack_env}"
  ;;
plan)
  tf_init
  var_file=$(eval "pwd")/stacks/${stack_name}/vars/${stack_env}.tfvars
  plan_output=$(eval "pwd")/${stack_env}.tfplan
  terraform -chdir=${tf_dir} plan -var environment=$env_name \
    -var-file=${var_file} \
    -out=${plan_output}
  ;;
dojo-plan)
  dojo "./tasks plan ${stack_name} ${stack_env}"
  ;;
apply)
  tf_init
  terraform -chdir=${stack_env}.tfplan apply
  ;;
dojo-apply)
  dojo "./tasks apply ${stack_name} ${stack_env}"
  ;;
format)
  terraform -chdir=stacks/${stack_name}/terraform fmt
  ;;
destroy)
  tf_init
  terraform -chdir=${tf_dir} destroy -var environment=$env_name \
    -var-file=stacks/${stack_name}/vars/${stack_env}.tfvars
  ;;
*)
  echo "Invalid task: '${task}'"
  exit 1
  ;;
esac

set +e
